{"version":3,"file":"main-BmcNW1lX.js","sources":["../../ar-animation.js","../../image-tracker.js","../../main.js"],"sourcesContent":["// 移除Three.js依赖，只使用原生Canvas API\n// import * as THREE from 'three';\n\nexport class ARAnimation {\n    constructor() {\n        this.canvas = null;\n        this.isVisible = false;\n        this.isRunning = false;\n        this.targetPosition = { x: 0, y: 0 };\n        this.targetSize = { width: 100, height: 100 };\n        \n        // PNG逐帧动画相关 - 优化版本\n        this.frames = []; // 存储所有帧图片\n        this.currentFrame = 0; // 当前帧索引\n        this.frameCount = 0; // 总帧数\n        this.fps = 0.8; // 降低帧率到0.8fps，放慢10倍切换速度\n        this.lastFrameTime = 0; // 上一帧时间\n        this.isLoaded = false; // 是否加载完成\n        \n        // 2D Canvas动画相关\n        this.ctx = null;\n        this.animationId = null;\n        \n        // 性能优化：预计算尺寸\n        this.cachedSizes = new Map();\n        \n        console.log('AR动画类初始化完成');\n    }\n\n    start(canvas, position, size) {\n        if (!canvas) return;\n        \n        console.log('启动AR动画...');\n        \n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.targetPosition = position || { x: 0, y: 0 };\n        this.targetSize = size || { width: 100, height: 100 };\n        \n        if (!this.isRunning) {\n            this.isRunning = true;\n            this.isVisible = true;\n            this.lastFrameTime = performance.now();\n            this.animate();\n        }\n        \n        console.log('AR动画已启动');\n    }\n\n    stop() {\n        console.log('停止AR动画...');\n        \n        this.isRunning = false;\n        this.isVisible = false;\n        \n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n            this.animationId = null;\n        }\n        \n        // 清除canvas\n        if (this.ctx && this.canvas) {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n        \n        console.log('AR动画已停止');\n    }\n\n    // 优化的逐帧动画循环\n    animate() {\n        if (!this.isRunning || !this.ctx || !this.canvas) return;\n        \n        const currentTime = performance.now();\n        const deltaTime = currentTime - this.lastFrameTime;\n        \n        // 根据帧率更新帧\n        if (deltaTime >= (1000 / this.fps)) {\n            this.currentFrame = (this.currentFrame + 1) % this.frameCount;\n            this.lastFrameTime = currentTime;\n        }\n        \n        // 清除之前的绘制\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // 绘制当前帧\n        this.drawCurrentFrame();\n        \n        // 继续动画循环\n        this.animationId = requestAnimationFrame(() => this.animate());\n    }\n\n    // 优化的绘制当前帧\n    drawCurrentFrame() {\n        if (!this.isLoaded || this.frames.length === 0) {\n            console.log('动画未加载完成，跳过绘制', {\n                isLoaded: this.isLoaded,\n                framesCount: this.frames.length,\n                currentFrame: this.currentFrame\n            });\n            \n            // 在canvas上绘制调试信息\n            if (this.ctx && this.canvas) {\n                this.ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';\n                this.ctx.fillRect(10, 10, 300, 60);\n                this.ctx.fillStyle = 'white';\n                this.ctx.font = '16px Arial';\n                this.ctx.fillText('动画未加载', 20, 35);\n                this.ctx.fillText(`已加载: ${this.frames.filter(f => f).length}/${this.frameCount}`, 20, 55);\n            }\n            return;\n        }\n        \n        const frame = this.frames[this.currentFrame];\n        if (!frame) {\n            console.log('当前帧不存在', {\n                currentFrame: this.currentFrame,\n                totalFrames: this.frameCount,\n                frames: this.frames.map(f => f ? 'loaded' : 'null')\n            });\n            \n            // 在canvas上绘制调试信息\n            if (this.ctx && this.canvas) {\n                this.ctx.fillStyle = 'rgba(255, 165, 0, 0.8)';\n                this.ctx.fillRect(10, 10, 300, 60);\n                this.ctx.fillStyle = 'white';\n                this.ctx.font = '16px Arial';\n                this.ctx.fillText('当前帧不存在', 20, 35);\n                this.ctx.fillText(`帧${this.currentFrame} / 总${this.frameCount}`, 20, 55);\n            }\n            return;\n        }\n        \n        // 使用缓存的尺寸计算\n        const drawInfo = this.getCachedDrawInfo(frame);\n        \n        // 绘制当前帧\n        this.ctx.drawImage(\n            frame, \n            drawInfo.x, \n            drawInfo.y, \n            drawInfo.width, \n            drawInfo.height\n        );\n        // 不再绘制任何调试边框\n    }\n\n    // 新增：在指定的context上绘制当前帧（用于拍照功能）\n    drawCurrentFrameToContext(targetCtx, canvasWidth, canvasHeight) {\n        if (!this.isLoaded || this.frames.length === 0) {\n            console.log('动画未加载完成，跳过绘制到目标context');\n            return;\n        }\n        \n        const frame = this.frames[this.currentFrame];\n        if (!frame) {\n            console.log('当前帧不存在，跳过绘制到目标context');\n            return;\n        }\n        \n        // 使用与显示时相同的逻辑：以中心点计算位置\n        const centerX = 50 + Math.max(this.targetSize.width * 1.5, 180) / 2; // 距离左边缘50px + 动画宽度的一半\n        const centerY = canvasHeight - 200 + Math.max(this.targetSize.height * 1.5, 180) / 2; // 距离底部200px + 动画高度的一半\n        \n        // 使用1.5倍放大的尺寸，与显示尺寸保持一致\n        const size = {\n            width: Math.max(this.targetSize.width * 1.5, 180), // 1.5倍放大\n            height: Math.max(this.targetSize.height * 1.5, 180)\n        };\n        \n        // 计算帧的绘制位置和大小\n        const frameWidth = frame.width;\n        const frameHeight = frame.height;\n        const scale = Math.min(size.width / frameWidth, size.height / frameHeight);\n        const drawWidth = frameWidth * scale;\n        const drawHeight = frameHeight * scale;\n        \n        // 计算左上角位置（以中心点计算，与显示时保持一致）\n        const drawX = centerX - drawWidth / 2;\n        const drawY = centerY - drawHeight / 2;\n        \n        // 边界检查，确保动画不会超出目标canvas\n        let finalX = Math.max(20, Math.min(drawX, canvasWidth - drawWidth - 20));\n        let finalY = Math.max(20, Math.min(drawY, canvasHeight - drawHeight - 20));\n        \n        // 绘制当前帧到目标context\n        targetCtx.drawImage(\n            frame, \n            finalX, \n            finalY, \n            drawWidth, \n            drawHeight\n        );\n        \n        console.log('动画帧已绘制到目标context', {\n            frame: this.currentFrame,\n            position: { x: finalX, y: finalY, width: drawWidth, height: drawHeight },\n            targetCanvasSize: `${canvasWidth}x${canvasHeight}`\n        });\n    }\n\n    // 缓存绘制信息，避免重复计算\n    getCachedDrawInfo(frame) {\n        const cacheKey = `${frame.width}-${frame.height}-${this.targetSize.width}-${this.targetSize.height}`;\n        \n        if (this.cachedSizes.has(cacheKey)) {\n            return this.cachedSizes.get(cacheKey);\n        }\n        \n        // 计算绘制位置和大小\n        const centerX = this.targetPosition.x;\n        const centerY = this.targetPosition.y;\n        \n        // 使用1.5倍放大的尺寸，确保动画足够大且清晰\n        const minSize = 150; // 最小尺寸也放大1.5倍\n        const maxSize = Math.max(this.targetSize.width, this.targetSize.height);\n        const size = Math.max(minSize, maxSize * 1.5); // 1.5倍放大\n        \n        // 计算帧的绘制位置和大小\n        const frameWidth = frame.width;\n        const frameHeight = frame.height;\n        const scale = Math.min(size / frameWidth, size / frameHeight);\n        const drawWidth = frameWidth * scale;\n        const drawHeight = frameHeight * scale;\n        \n        // 计算左上角位置\n        const drawX = centerX - drawWidth / 2;\n        const drawY = centerY - drawHeight / 2;\n        \n        // 边界检查，确保动画不会超出屏幕\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        \n        let finalX = Math.max(10, Math.min(drawX, viewportWidth - drawWidth - 10));\n        let finalY = Math.max(10, Math.min(drawY, viewportHeight - drawHeight - 10));\n        \n        const drawInfo = { x: finalX, y: finalY, width: drawWidth, height: drawHeight };\n        \n        // 缓存结果\n        this.cachedSizes.set(cacheKey, drawInfo);\n        \n        return drawInfo;\n    }\n\n    // 优化的PNG逐帧动画加载\n    loadFrames() {\n        return new Promise((resolve, reject) => {\n            // 根据环境使用不同的路径\n            const basePath = import.meta.env.DEV ? './images/' : '/AR2/images/';\n            const framePaths = [\n                basePath + 'zm1.png',\n                basePath + 'zm2.png'\n            ];\n            \n            let loadedCount = 0;\n            let errorCount = 0;\n            const totalFrames = framePaths.length;\n            \n            console.log('开始加载PNG动画帧...', framePaths);\n            \n            // 设置总体超时\n            const overallTimeout = setTimeout(() => {\n                if (loadedCount < totalFrames) {\n                    console.error('动画加载超时，已加载:', loadedCount, '/', totalFrames);\n                    reject(new Error('动画加载超时'));\n                }\n            }, 5000); // 增加超时时间到5秒\n            \n            framePaths.forEach((path, index) => {\n                const img = new Image();\n                \n                img.onload = () => {\n                    loadedCount++;\n                    console.log(`✅ 帧${index + 1}加载成功:`, path, `(${img.width}x${img.height})`);\n                    this.frames[index] = img;\n                    \n                    if (loadedCount === totalFrames) {\n                        clearTimeout(overallTimeout);\n                        this.frameCount = totalFrames;\n                        this.isLoaded = true;\n                        console.log('🎉 所有动画帧加载完成!', {\n                            totalFrames: this.frameCount,\n                            frames: this.frames.map(f => f ? `${f.width}x${f.height}` : 'null')\n                        });\n                        resolve();\n                    }\n                };\n                \n                img.onerror = (error) => {\n                    errorCount++;\n                    console.error(`❌ 帧${index + 1}加载失败:`, path, error);\n                    this.frames[index] = null;\n                    \n                    if (errorCount === totalFrames) {\n                        clearTimeout(overallTimeout);\n                        console.error('所有动画帧加载失败');\n                        reject(new Error('所有动画帧加载失败'));\n                    }\n                };\n                \n                // 添加跨域支持\n                img.crossOrigin = 'anonymous';\n                img.src = path;\n                console.log(`🔄 开始加载帧${index + 1}:`, path);\n            });\n        });\n    }\n\n    // 兼容旧版本的GIF加载方法\n    loadGif(gifPath) {\n        console.log('检测到GIF路径，自动切换到PNG逐帧动画模式');\n        return this.loadFrames();\n    }\n\n    // 兼容旧版本的方法\n    init() {\n        console.log('AR动画初始化完成');\n    }\n\n    showAnimation(position, size) {\n        this.start(null, position, size);\n    }\n\n    hideAnimation() {\n        this.stop();\n    }\n\n    update() {\n        // 这个方法保留用于兼容性\n    }\n\n    dispose() {\n        this.stop();\n        \n        // 清理帧图片\n        this.frames = [];\n        this.isLoaded = false;\n        \n        // 清理缓存\n        this.cachedSizes.clear();\n        \n        console.log('AR动画资源已清理');\n    }\n} ","export class ImageTracker {\n    constructor() {\n        this.lastDetection = null;\n        this.detectionTimeout = 500; // 增加到500ms，减少重复检测\n        this.templates = [];\n        this.threshold = 0.15; // 降低匹配阈值，提高检测灵敏度\n        this.debugMode = false;\n        this.lastDetectionTime = 0;\n        this.detectionInterval = 250; // 增加到250ms，大幅减少CPU使用\n        this.isInitialized = false;\n        \n        // 性能优化：缓存检测结果\n        this.detectionCache = new Map();\n        this.cacheTimeout = 1000; // 缓存1秒\n        \n        // 延迟初始化，减少启动时间\n        setTimeout(() => {\n            this.isInitialized = true;\n            console.log('图片追踪器延迟初始化完成');\n        }, 200); // 减少延迟时间\n    }\n\n    // 添加模板图片 - 进一步优化版本\n    addTemplate(imageUrl, name = 'template') {\n        return new Promise((resolve, reject) => {\n            const img = new Image();\n            img.crossOrigin = 'anonymous';\n            \n            // 设置加载超时\n            const timeout = setTimeout(() => {\n                reject(new Error('图片加载超时'));\n            }, 2000); // 减少超时时间\n            \n            img.onload = () => {\n                clearTimeout(timeout);\n                \n                // 优化canvas创建\n                const canvas = document.createElement('canvas');\n                const ctx = canvas.getContext('2d');\n                \n                // 进一步限制图片尺寸以提高性能\n                const maxSize = 150; // 减少最大尺寸\n                const scale = Math.min(maxSize / img.width, maxSize / img.height, 1);\n                canvas.width = img.width * scale;\n                canvas.height = img.height * scale;\n                \n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                \n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                this.templates.push({\n                    name,\n                    imageData,\n                    width: canvas.width,\n                    height: canvas.height\n                });\n                \n                console.log(`模板图片 \"${name}\" 添加成功，尺寸: ${canvas.width}x${canvas.height}`);\n                resolve();\n            };\n            \n            img.onerror = (error) => {\n                clearTimeout(timeout);\n                console.error(`模板图片 \"${name}\" 加载失败:`, error);\n                reject(error);\n            };\n            \n            img.src = imageUrl;\n        });\n    }\n\n    // 优化的图片检测\n    async detect(ctx, width, height) {\n        try {\n            // 限制检测频率\n            const now = Date.now();\n            if (now - this.lastDetectionTime < this.detectionInterval) {\n                return this.lastDetection ? this.lastDetection.result : { detected: false };\n            }\n            this.lastDetectionTime = now;\n\n            // 检查缓存\n            const cacheKey = `${width}x${height}`;\n            const cachedResult = this.detectionCache.get(cacheKey);\n            if (cachedResult && now - cachedResult.timestamp < this.cacheTimeout) {\n                return cachedResult.result;\n            }\n\n            // 检查是否有有效的检测结果\n            if (this.lastDetection && \n                now - this.lastDetection.timestamp < this.detectionTimeout) {\n                return this.lastDetection.result;\n            }\n\n            // 获取当前帧的图像数据\n            const frameData = ctx.getImageData(0, 0, width, height);\n            \n            // 对每个模板进行匹配\n            for (const template of this.templates) {\n                const match = this.matchTemplateOptimized(frameData, template, width, height);\n                \n                if (match && match.confidence > this.threshold) {\n                    const result = {\n                        detected: true,\n                        type: 'image',\n                        name: template.name,\n                        position: match.position,\n                        size: match.size,\n                        confidence: match.confidence\n                    };\n                    \n                    // 缓存结果\n                    this.detectionCache.set(cacheKey, {\n                        timestamp: now,\n                        result: result\n                    });\n                    \n                    this.lastDetection = {\n                        timestamp: now,\n                        result: result\n                    };\n                    \n                    console.log(`✅ 检测到图片 \"${template.name}\"，匹配度: ${match.confidence.toFixed(3)}`);\n                    return result;\n                }\n            }\n\n            // 如果没有检测到图片，清除上次检测结果\n            if (this.lastDetection && \n                now - this.lastDetection.timestamp > this.detectionTimeout) {\n                this.lastDetection = null;\n            }\n\n            // 缓存未检测到结果\n            const noDetectionResult = { detected: false };\n            this.detectionCache.set(cacheKey, {\n                timestamp: now,\n                result: noDetectionResult\n            });\n\n            return noDetectionResult;\n\n        } catch (error) {\n            console.error('图片检测错误:', error);\n            return { detected: false };\n        }\n    }\n\n    // 优化的模板匹配算法\n    matchTemplateOptimized(frameData, template, frameWidth, frameHeight) {\n        const templateWidth = template.width;\n        const templateHeight = template.height;\n        \n        // 如果模板太大，跳过\n        if (templateWidth > frameWidth || templateHeight > frameHeight) {\n            return null;\n        }\n\n        let bestMatch = null;\n        let bestConfidence = 0;\n\n        // 增加搜索步长以提高性能\n        const step = Math.max(3, Math.floor(Math.min(templateWidth, templateHeight) / 20));\n        \n        // 限制搜索范围，只搜索中心区域\n        const searchMargin = Math.min(80, Math.floor(Math.min(frameWidth, frameHeight) * 0.08));\n        const startX = searchMargin;\n        const startY = searchMargin;\n        const endX = frameWidth - templateWidth - searchMargin;\n        const endY = frameHeight - templateHeight - searchMargin;\n        \n        // 使用更少的采样点\n        const maxSamples = 100; // 限制最大采样数\n        let sampleCount = 0;\n        \n        for (let y = startY; y <= endY && sampleCount < maxSamples; y += step) {\n            for (let x = startX; x <= endX && sampleCount < maxSamples; x += step) {\n                sampleCount++;\n                \n                const confidence = this.calculateSimilarityFast(\n                    frameData, template.imageData,\n                    x, y, frameWidth,\n                    0, 0, templateWidth,\n                    templateWidth, templateHeight\n                );\n\n                if (confidence > bestConfidence) {\n                    bestConfidence = confidence;\n                    bestMatch = {\n                        position: { x, y },\n                        size: { width: templateWidth, height: templateHeight },\n                        confidence\n                    };\n                    \n                    // 如果找到很好的匹配，提前退出\n                    if (confidence > 0.8) {\n                        return bestMatch;\n                    }\n                }\n            }\n        }\n\n        return bestMatch;\n    }\n\n    // 快速相似度计算\n    calculateSimilarityFast(frameData, templateData, frameX, frameY, frameWidth, \n                           templateX, templateY, templateWidth, width, height) {\n        let totalDiff = 0;\n        let totalPixels = 0;\n\n        // 使用更少的采样点进行计算\n        const sampleStep = Math.max(1, Math.floor(Math.min(width, height) / 10));\n        \n        for (let y = 0; y < height; y += sampleStep) {\n            for (let x = 0; x < width; x += sampleStep) {\n                const frameIndex = ((frameY + y) * frameWidth + (frameX + x)) * 4;\n                const templateIndex = ((templateY + y) * templateWidth + (templateX + x)) * 4;\n\n                // 只计算RGB差异，忽略Alpha通道\n                const rDiff = Math.abs(frameData.data[frameIndex] - templateData.data[templateIndex]);\n                const gDiff = Math.abs(frameData.data[frameIndex + 1] - templateData.data[templateIndex + 1]);\n                const bDiff = Math.abs(frameData.data[frameIndex + 2] - templateData.data[templateIndex + 2]);\n\n                totalDiff += (rDiff + gDiff + bDiff) / 3;\n                totalPixels++;\n            }\n        }\n\n        // 计算相似度（0-1，1表示完全匹配）\n        if (totalPixels === 0) return 0;\n        const averageDiff = totalDiff / totalPixels;\n        return Math.max(0, 1 - averageDiff / 255);\n    }\n\n    // 原始模板匹配算法（保留用于兼容性）\n    matchTemplate(frameData, template, frameWidth, frameHeight) {\n        return this.matchTemplateOptimized(frameData, template, frameWidth, frameHeight);\n    }\n\n    // 原始相似度计算（保留用于兼容性）\n    calculateSimilarity(frameData, templateData, frameX, frameY, frameWidth, \n                       templateX, templateY, templateWidth, width, height) {\n        return this.calculateSimilarityFast(frameData, templateData, frameX, frameY, frameWidth, \n                                          templateX, templateY, templateWidth, width, height);\n    }\n\n    // 简化的图片检测（基于颜色和形状特征）\n    detectSimple(ctx, width, height) {\n        try {\n            const imageData = ctx.getImageData(0, 0, width, height);\n            \n            // 寻找高对比度区域\n            const regions = this.findHighContrastRegions(imageData, width, height);\n            \n            for (const region of regions) {\n                if (this.isImageLike(region, imageData, width, height)) {\n                    return {\n                        detected: true,\n                        type: 'simple',\n                        position: { x: region.x, y: region.y },\n                        size: { width: region.width, height: region.height },\n                        confidence: 0.5\n                    };\n                }\n            }\n            \n            return { detected: false };\n            \n        } catch (error) {\n            console.error('简化检测错误:', error);\n            return { detected: false };\n        }\n    }\n\n    // 寻找高对比度区域\n    findHighContrastRegions(imageData, width, height) {\n        const regions = [];\n        const regionSize = 50;\n        const step = 25;\n        \n        for (let y = 0; y < height - regionSize; y += step) {\n            for (let x = 0; x < width - regionSize; x += step) {\n                const contrast = this.calculateRegionContrast(imageData, x, y, regionSize, width);\n                \n                if (contrast > 30) { // 降低对比度阈值\n                    regions.push({\n                        x, y, width: regionSize, height: regionSize, contrast\n                    });\n                }\n            }\n        }\n        \n        // 按对比度排序，返回前几个\n        return regions.sort((a, b) => b.contrast - a.contrast).slice(0, 3);\n    }\n\n    // 计算区域对比度\n    calculateRegionContrast(imageData, x, y, size, width) {\n        let minBrightness = 255;\n        let maxBrightness = 0;\n        \n        for (let dy = 0; dy < size; dy++) {\n            for (let dx = 0; dx < size; dx++) {\n                const index = ((y + dy) * width + (x + dx)) * 4;\n                const brightness = (imageData.data[index] + imageData.data[index + 1] + imageData.data[index + 2]) / 3;\n                \n                minBrightness = Math.min(minBrightness, brightness);\n                maxBrightness = Math.max(maxBrightness, brightness);\n            }\n        }\n        \n        return maxBrightness - minBrightness;\n    }\n\n    // 检查区域是否像图片\n    isImageLike(region, imageData, width, height) {\n        // 简单的图片特征检查\n        const edgeDensity = this.calculateEdgeDensity(imageData, region.x, region.y, region.width, region.height, width);\n        return edgeDensity > 0.1; // 边缘密度阈值\n    }\n\n    // 计算边缘密度\n    calculateEdgeDensity(imageData, x, y, w, h, width) {\n        let edgeCount = 0;\n        let totalPixels = 0;\n        \n        for (let dy = 1; dy < h - 1; dy++) {\n            for (let dx = 1; dx < w - 1; dx++) {\n                const index = ((y + dy) * width + (x + dx)) * 4;\n                const center = (imageData.data[index] + imageData.data[index + 1] + imageData.data[index + 2]) / 3;\n                \n                // 检查周围像素\n                const left = ((y + dy) * width + (x + dx - 1)) * 4;\n                const leftBrightness = (imageData.data[left] + imageData.data[left + 1] + imageData.data[left + 2]) / 3;\n                \n                if (Math.abs(center - leftBrightness) > 20) {\n                    edgeCount++;\n                }\n                \n                totalPixels++;\n            }\n        }\n        \n        return totalPixels > 0 ? edgeCount / totalPixels : 0;\n    }\n\n    // 清理资源\n    dispose() {\n        this.templates = [];\n        this.detectionCache.clear();\n        this.lastDetection = null;\n        console.log('图片追踪器资源已清理');\n    }\n} ","import { ARAnimation } from './ar-animation.js';\nimport { ImageTracker } from './image-tracker.js';\n\nconsole.log('AR应用开始加载...');\n\n// 快速启动模式配置\nconst FAST_START_CONFIG = {\n    // 快速启动：立即显示界面，后台加载资源\n    enableFastStart: true,\n    // 资源加载超时时间\n    resourceTimeout: 2000,\n    // 检测间隔（毫秒）\n    detectionInterval: 200,\n    // 简化检测模式\n    simpleDetection: true,\n    // 延迟初始化追踪器\n    delayTrackerInit: 500\n};\n\n// 检查基本功能\nfunction checkBasicFeatures() {\n    console.log('检查基本功能...');\n    \n    // 检查DOM是否加载完成\n    if (document.readyState === 'loading') {\n        console.log('DOM还在加载中...');\n        return false;\n    }\n    \n    // 检查必要的元素是否存在\n    const startARBtn = document.getElementById('startAR');\n    const startScreen = document.getElementById('startScreen');\n    const arScreen = document.getElementById('arScreen');\n    const loadingScreen = document.getElementById('loadingScreen');\n    \n    console.log('UI元素检查:', {\n        startARBtn: !!startARBtn,\n        startScreen: !!startScreen,\n        arScreen: !!arScreen,\n        loadingScreen: !!loadingScreen\n    });\n    \n    if (!startARBtn || !startScreen || !arScreen || !loadingScreen) {\n        console.error('必要的UI元素未找到！');\n        return false;\n    }\n    \n    return true;\n}\n\n// 优化的AR应用类\nclass OptimizedARApp {\n    constructor() {\n        console.log('初始化OptimizedARApp...');\n        this.isInitialized = false;\n        this.isTracking = false;\n        this.animation = null;\n        this.imageTracker = null;\n        this.detectionCanvas = null;\n        this.detectionCtx = null;\n        this.resourcesLoaded = false;\n        this.init();\n    }\n\n    init() {\n        console.log('开始快速初始化...');\n        \n        if (!checkBasicFeatures()) {\n            console.error('基本功能检查失败');\n            this.hideLoading();\n            this.showError('应用初始化失败：基本功能检查失败');\n            return;\n        }\n        \n        try {\n            this.initUI();\n            this.initEventListeners();\n            \n            // 快速启动：立即显示界面\n            if (FAST_START_CONFIG.enableFastStart) {\n                this.isInitialized = true;\n                this.hideLoading();\n                this.showStartScreen(); // 明确显示启动界面\n                console.log('快速启动完成，界面已显示');\n                \n                // 后台异步加载资源\n                this.loadResourcesInBackground();\n            } else {\n                // 传统模式：等待资源加载完成\n                this.initTrackersAsync();\n            }\n            \n        } catch (error) {\n            console.error('初始化过程中出错:', error);\n            this.hideLoading();\n            this.showError('应用初始化失败: ' + error.message);\n        }\n    }\n\n    initUI() {\n        console.log('初始化UI元素...');\n        this.startScreen = document.getElementById('startScreen');\n        this.arScreen = document.getElementById('arScreen');\n        this.loadingScreen = document.getElementById('loadingScreen');\n        this.startARBtn = document.getElementById('startAR');\n        this.backBtn = document.getElementById('backBtn');\n        this.captureBtn = document.getElementById('captureBtn');\n        this.status = document.getElementById('status');\n        this.video = document.getElementById('video');\n        this.canvas = document.getElementById('canvas');\n        \n        if (this.canvas) {\n            this.ctx = this.canvas.getContext('2d');\n        }\n        \n        // 创建检测用的canvas\n        this.detectionCanvas = document.createElement('canvas');\n        this.detectionCtx = this.detectionCanvas.getContext('2d');\n        \n        console.log('UI元素初始化完成');\n    }\n\n    async loadResourcesInBackground() {\n        console.log('后台加载资源...');\n        \n        try {\n            // 延迟初始化追踪器，减少启动时间\n            setTimeout(async () => {\n                await this.initTrackersAsync();\n            }, FAST_START_CONFIG.delayTrackerInit);\n            \n        } catch (error) {\n            console.error('后台资源加载失败:', error);\n        }\n    }\n\n    async initTrackersAsync() {\n        try {\n            console.log('开始异步初始化追踪器...');\n            \n            // 并行初始化核心组件\n            const [imageTracker, animation] = await Promise.allSettled([\n                this.createImageTracker(),\n                this.createAnimation()\n            ]);\n            \n            if (imageTracker.status === 'fulfilled') {\n                this.imageTracker = imageTracker.value;\n                console.log('图片追踪器初始化成功');\n            }\n            \n            if (animation.status === 'fulfilled') {\n                this.animation = animation.value;\n                console.log('动画组件初始化成功');\n            }\n            \n            this.resourcesLoaded = true;\n            console.log('AR组件初始化完成');\n            \n        } catch (error) {\n            console.error('追踪器初始化失败:', error);\n        }\n    }\n\n    async createImageTracker() {\n        const tracker = new ImageTracker();\n        \n        // 设置简化的检测模式\n        if (FAST_START_CONFIG.simpleDetection) {\n            tracker.detectionInterval = FAST_START_CONFIG.detectionInterval;\n            tracker.threshold = 0.3; // 降低阈值，提高检测灵敏度\n        }\n        \n        // 尝试加载marker，但不阻塞\n        try {\n            // 根据环境使用不同的路径\n            const markerPath = import.meta.env.DEV ? './images/marker.png' : '/AR2/images/marker.png';\n            await tracker.addTemplate(markerPath, 'marker');\n            console.log('Marker加载成功');\n        } catch (error) {\n            console.log('Marker加载失败:', error.message);\n            // 不添加备用模板，避免误检测\n            throw error;\n        }\n        \n        return tracker;\n    }\n\n    async createAnimation() {\n        const animation = new ARAnimation();\n        \n        console.log('创建动画组件...');\n        \n        // 尝试加载PNG动画，但不阻塞\n        try {\n            await animation.loadFrames();\n            console.log('PNG动画加载成功');\n            console.log('动画状态:', {\n                isLoaded: animation.isLoaded,\n                frameCount: animation.frameCount,\n                framesLength: animation.frames.length,\n                fps: animation.fps\n            });\n        } catch (error) {\n            console.log('PNG动画加载失败:', error.message);\n            // 即使加载失败，也返回动画组件，避免主应用崩溃\n        }\n        \n        return animation;\n    }\n\n    async addTestTemplate(tracker) {\n        try {\n            // 创建一个简单的测试模板\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = 80;\n            canvas.height = 80;\n            \n            // 绘制一个简单的测试图案\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 80, 80);\n            ctx.strokeStyle = '#000000';\n            ctx.lineWidth = 2;\n            ctx.strokeRect(10, 10, 60, 60);\n            ctx.fillStyle = '#000000';\n            ctx.fillRect(25, 25, 30, 30);\n            \n            // 将canvas转换为blob URL\n            canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                tracker.addTemplate(url, 'test-marker');\n                console.log('测试模板添加成功');\n            });\n            \n        } catch (error) {\n            console.error('添加测试模板失败:', error);\n        }\n    }\n\n    initEventListeners() {\n        console.log('初始化事件监听器...');\n        \n        if (this.startARBtn) {\n            this.startARBtn.addEventListener('click', () => this.startAR());\n        }\n        \n        if (this.backBtn) {\n            this.backBtn.addEventListener('click', () => this.stopAR());\n        }\n        \n        if (this.captureBtn) {\n            this.captureBtn.addEventListener('click', () => this.capturePhoto());\n        }\n        \n        console.log('事件监听器初始化完成');\n    }\n\n    async startAR() {\n        console.log('开始AR体验...');\n        console.log('当前状态:', {\n            isInitialized: this.isInitialized,\n            resourcesLoaded: this.resourcesLoaded,\n            hasImageTracker: !!this.imageTracker,\n            hasAnimation: !!this.animation\n        });\n        \n        // 放宽初始化检查，允许在资源未完全加载时启动\n        if (!this.isInitialized) {\n            console.log('应用未完全初始化，尝试继续启动...');\n            // 不阻止启动，而是继续尝试\n        }\n        \n        try {\n            this.showARScreen();\n            \n            // 确保动画被隐藏\n            this.hideAnimation();\n            \n            const cameraStarted = await this.requestCamera();\n            if (!cameraStarted) {\n                this.showError('无法启动摄像头，请检查权限设置');\n                return;\n            }\n            \n            await this.waitForVideoLoad();\n            \n            // 如果追踪器还没准备好，等待一下\n            if (!this.imageTracker) {\n                await this.waitForTracker();\n            }\n            \n            this.startTracking();\n            \n        } catch (error) {\n            console.error('启动AR失败:', error);\n            this.showError('启动AR失败: ' + error.message);\n        }\n    }\n\n    // 等待追踪器准备就绪\n    async waitForTracker() {\n        return new Promise((resolve) => {\n            const checkTracker = () => {\n                if (this.imageTracker) {\n                    resolve();\n                } else {\n                    setTimeout(checkTracker, 100);\n                }\n            };\n            checkTracker();\n        });\n    }\n\n    startTracking() {\n        if (this.isTracking) return;\n        \n        this.isTracking = true;\n        this.trackFrame();\n        console.log('开始追踪');\n    }\n\n    stopTracking() {\n        this.isTracking = false;\n        \n        if (this.animation) {\n            this.animation.stop();\n        }\n        \n        console.log('停止追踪');\n    }\n\n    trackFrame() {\n        if (!this.isTracking || !this.video || !this.canvas || !this.ctx) return;\n        \n        try {\n            // 绘制视频帧到canvas\n            this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);\n            \n            // 检测marker\n            this.detectMarker();\n            \n            // 继续下一帧\n            requestAnimationFrame(() => this.trackFrame());\n            \n        } catch (error) {\n            console.error('追踪帧处理错误:', error);\n            this.stopTracking();\n        }\n    }\n\n    async detectMarker() {\n        if (!this.imageTracker) {\n            console.log('图片追踪器未准备好，跳过检测');\n            return;\n        }\n        \n        if (!this.ctx) {\n            console.log('Canvas上下文未准备好，跳过检测');\n            return;\n        }\n        \n        try {\n            const detectionResult = await this.imageTracker.detect(\n                this.ctx, \n                this.canvas.width, \n                this.canvas.height\n            );\n            \n            // 更宽松的检测条件\n            if (detectionResult && \n                detectionResult.detected && \n                detectionResult.confidence > 0.4 && // 降低置信度要求\n                detectionResult.position && \n                detectionResult.size &&\n                detectionResult.size.width > 10 && // 降低最小尺寸要求\n                detectionResult.size.height > 10) {\n                \n                console.log('检测到marker:', {\n                    confidence: detectionResult.confidence,\n                    position: detectionResult.position,\n                    size: detectionResult.size\n                });\n                this.showAnimation(detectionResult);\n            } else {\n                // 没有检测到marker，隐藏动画\n                this.hideAnimation();\n            }\n            \n        } catch (error) {\n            console.error('检测marker错误:', error);\n            // 不阻止继续检测\n        }\n    }\n\n    showAnimation(detectionResult) {\n        if (!this.animation) {\n            console.log('动画组件不存在，跳过显示');\n            return;\n        }\n        \n        if (!this.canvas) {\n            console.log('Canvas不存在，跳过显示');\n            return;\n        }\n        \n        if (!detectionResult || !detectionResult.position || !detectionResult.size) {\n            console.log('检测结果数据不完整，跳过显示');\n            return;\n        }\n        \n        try {\n            // 位置计算：显示在左下角\n            const position = {\n                x: 50, // 距离左边缘50px\n                y: this.canvas.height - 200 // 距离底部200px\n            };\n            \n            // 优化尺寸计算：将动画尺寸放大2倍（从0.75倍变为1.5倍）\n            const size = {\n                width: Math.max(detectionResult.size.width * 1.8, 180), // 比marker大1.8倍（1.5倍），最小180px\n                height: Math.max(detectionResult.size.height * 1.8, 180)\n            };\n            \n            console.log('准备显示动画', {\n                position: position,\n                size: size,\n                animationLoaded: this.animation.isLoaded,\n                framesCount: this.animation.frames ? this.animation.frames.length : 0,\n                frameCount: this.animation.frameCount,\n                canvasSize: `${this.canvas.width}x${this.canvas.height}`\n            });\n            \n            this.animation.start(this.canvas, position, size);\n            \n        } catch (error) {\n            console.error('显示动画错误:', error);\n        }\n    }\n\n    hideAnimation() {\n        if (this.animation) {\n            this.animation.stop();\n        }\n    }\n\n    async requestCamera() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: { ideal: 640 },\n                    height: { ideal: 480 },\n                    facingMode: 'environment' // 优先使用后置摄像头\n                }\n            });\n            \n            this.video.srcObject = stream;\n            this.video.play();\n            \n            console.log('摄像头启动成功');\n            return true;\n            \n        } catch (error) {\n            console.error('摄像头启动失败:', error);\n            return false;\n        }\n    }\n\n    waitForVideoLoad() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => {\n                reject(new Error('视频加载超时'));\n            }, 5000);\n            \n            this.video.onloadedmetadata = () => {\n                clearTimeout(timeout);\n                \n                // 设置canvas尺寸\n                this.canvas.width = this.video.videoWidth;\n                this.canvas.height = this.video.videoHeight;\n                \n                console.log('视频加载完成');\n                resolve();\n            };\n            \n            this.video.onerror = (error) => {\n                clearTimeout(timeout);\n                reject(new Error('视频加载失败'));\n            };\n        });\n    }\n\n    stopAR() {\n        console.log('停止AR体验...');\n        this.stopTracking();\n        this.hideAnimation();\n        this.showStartScreen();\n        this.updateStatus('AR体验已停止 / AR Experience Stopped');\n    }\n\n    capturePhoto() {\n        if (!this.canvas || !this.video) return;\n        \n        try {\n            // 创建临时canvas用于合成\n            const tempCanvas = document.createElement('canvas');\n            const tempCtx = tempCanvas.getContext('2d');\n            \n            tempCanvas.width = this.canvas.width;\n            tempCanvas.height = this.canvas.height;\n            \n            // 先绘制摄像头画面\n            tempCtx.drawImage(this.video, 0, 0, tempCanvas.width, tempCanvas.height);\n            \n            // 再叠加动画帧\n            if (this.animation && this.animation.isLoaded) {\n                this.animation.drawCurrentFrameToContext(tempCtx, tempCanvas.width, tempCanvas.height);\n            }\n            \n            // 保存合成图片\n            const link = document.createElement('a');\n            link.download = `ar_photo_${Date.now()}.png`;\n            link.href = tempCanvas.toDataURL();\n            link.click();\n            \n            this.updateStatus('照片已保存（包含完整背景和动画） / Photo saved (with background and animation)');\n        } catch (error) {\n            console.error('拍照失败:', error);\n            this.updateStatus('拍照失败 / Photo capture failed');\n        }\n    }\n\n    showLoading() {\n        if (this.loadingScreen) {\n            this.loadingScreen.style.display = 'flex';\n        }\n        if (this.startScreen) {\n            this.startScreen.style.display = 'none';\n        }\n        if (this.arScreen) {\n            this.arScreen.style.display = 'none';\n        }\n    }\n\n    hideLoading() {\n        if (this.loadingScreen) {\n            this.loadingScreen.style.display = 'none';\n        }\n    }\n\n    showStartScreen() {\n        if (this.startScreen) {\n            this.startScreen.style.display = 'flex';\n        }\n        if (this.arScreen) {\n            this.arScreen.style.display = 'none';\n        }\n        if (this.loadingScreen) {\n            this.loadingScreen.style.display = 'none';\n        }\n    }\n\n    showARScreen() {\n        if (this.arScreen) {\n            this.arScreen.style.display = 'flex';\n        }\n        if (this.startScreen) {\n            this.startScreen.style.display = 'none';\n        }\n        if (this.loadingScreen) {\n            this.loadingScreen.style.display = 'none';\n        }\n    }\n\n    updateStatus(message) {\n        if (this.status) {\n            this.status.textContent = message;\n        }\n        console.log('状态更新:', message);\n    }\n\n    showError(message) {\n        console.error('错误:', message);\n        this.updateStatus('错误: ' + message + ' / Error: ' + message);\n        setTimeout(() => {\n            this.updateStatus('');\n        }, 3000);\n    }\n}\n\n// 初始化应用\nfunction initApp() {\n    console.log('开始初始化AR应用...');\n    \n    // 检查浏览器兼容性\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        alert('您的浏览器不支持摄像头功能，请使用现代浏览器');\n        return;\n    }\n    \n    // 创建应用实例\n    window.arApp = new OptimizedARApp();\n}\n\n// 等待DOM加载完成后初始化\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initApp);\n} else {\n    initApp();\n} "],"names":["ARAnimation","canvas","position","size","currentTime","f","frame","drawInfo","targetCtx","canvasWidth","canvasHeight","centerX","centerY","frameWidth","frameHeight","scale","drawWidth","drawHeight","drawX","drawY","finalX","finalY","cacheKey","minSize","maxSize","viewportWidth","viewportHeight","resolve","reject","basePath","framePaths","loadedCount","errorCount","totalFrames","overallTimeout","path","index","img","error","gifPath","ImageTracker","imageUrl","name","timeout","ctx","imageData","width","height","now","cachedResult","frameData","template","match","result","noDetectionResult","templateWidth","templateHeight","bestMatch","bestConfidence","step","searchMargin","startX","startY","endX","endY","maxSamples","sampleCount","y","x","confidence","templateData","frameX","frameY","templateX","templateY","totalDiff","totalPixels","sampleStep","frameIndex","templateIndex","rDiff","gDiff","bDiff","averageDiff","regions","region","contrast","b","minBrightness","maxBrightness","dy","dx","brightness","w","h","edgeCount","center","left","leftBrightness","FAST_START_CONFIG","checkBasicFeatures","startARBtn","startScreen","arScreen","loadingScreen","OptimizedARApp","imageTracker","animation","tracker","blob","url","checkTracker","detectionResult","stream","tempCanvas","tempCtx","link","message","initApp"],"mappings":"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"}